// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.12
// source: api/imaging/v1/imaging.proto

package imagingpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ImagingService_ProcessImage_FullMethodName = "/api.imaging.v1.ImagingService/ProcessImage"
)

// ImagingServiceClient is the client API for ImagingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImagingServiceClient interface {
	// Обработка обложки игры и загрузка его в объектное хранилище.
	// Обработка - выделение доминантного цвета, и изменение размеров.
	// Картинка загружается по пути {base_directory}/{game_id}/{size}.
	// Информация о доминантном цвете изображения хранится в метаданных Content-Type.
	ProcessImage(ctx context.Context, in *ProcessImageRequest, opts ...grpc.CallOption) (*ProcessImageResponse, error)
}

type imagingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImagingServiceClient(cc grpc.ClientConnInterface) ImagingServiceClient {
	return &imagingServiceClient{cc}
}

func (c *imagingServiceClient) ProcessImage(ctx context.Context, in *ProcessImageRequest, opts ...grpc.CallOption) (*ProcessImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessImageResponse)
	err := c.cc.Invoke(ctx, ImagingService_ProcessImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImagingServiceServer is the server API for ImagingService service.
// All implementations must embed UnimplementedImagingServiceServer
// for forward compatibility
type ImagingServiceServer interface {
	// Обработка обложки игры и загрузка его в объектное хранилище.
	// Обработка - выделение доминантного цвета, и изменение размеров.
	// Картинка загружается по пути {base_directory}/{game_id}/{size}.
	// Информация о доминантном цвете изображения хранится в метаданных Content-Type.
	ProcessImage(context.Context, *ProcessImageRequest) (*ProcessImageResponse, error)
	mustEmbedUnimplementedImagingServiceServer()
}

// UnimplementedImagingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedImagingServiceServer struct {
}

func (UnimplementedImagingServiceServer) ProcessImage(context.Context, *ProcessImageRequest) (*ProcessImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessImage not implemented")
}
func (UnimplementedImagingServiceServer) mustEmbedUnimplementedImagingServiceServer() {}

// UnsafeImagingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImagingServiceServer will
// result in compilation errors.
type UnsafeImagingServiceServer interface {
	mustEmbedUnimplementedImagingServiceServer()
}

func RegisterImagingServiceServer(s grpc.ServiceRegistrar, srv ImagingServiceServer) {
	s.RegisterService(&ImagingService_ServiceDesc, srv)
}

func _ImagingService_ProcessImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagingServiceServer).ProcessImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImagingService_ProcessImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagingServiceServer).ProcessImage(ctx, req.(*ProcessImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImagingService_ServiceDesc is the grpc.ServiceDesc for ImagingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImagingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.imaging.v1.ImagingService",
	HandlerType: (*ImagingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessImage",
			Handler:    _ImagingService_ProcessImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/imaging/v1/imaging.proto",
}